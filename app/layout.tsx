import type { Metadata } from 'next'
import localFont from 'next/font/local'
import './globals.css'
import { UserProvider } from '@/lib/auth'
import { getUser } from '@/lib/db/queries/users'
import { ReactNode } from 'react'
import { ModalProvider } from '@/context/modal'
import ModalWrapper from '@/context/modal/wrapper'
import { LOCAL_STORAGE_KEY } from '@/components/dark-mode-toggle'
import { TooltipProvider } from '@/components/ui/tooltip'

const geistSans = localFont({
    src: './fonts/GeistVF.woff',
    variable: '--font-geist-sans',
    weight: '100 900',
})
const geistMono = localFont({
    src: './fonts/GeistMonoVF.woff',
    variable: '--font-geist-mono',
    weight: '100 900',
})

export const metadata: Metadata = {
    title: 'Create Next App',
    description: 'Generated by create next app',
}

export default function RootLayout({
    children,
}: Readonly<{
    children: ReactNode
}>) {
    let userPromise = getUser()

    return (
        <html lang="en">
            <head>
                <script
                    dangerouslySetInnerHTML={{
                        __html: `
                if (localStorage.getItem(${LOCAL_STORAGE_KEY}) === 'dark' || (!(${LOCAL_STORAGE_KEY} in localStorage) && window.matchMedia('(prefers-color-scheme: dark)').matches)) {
                  document.documentElement.classList.add('dark');
                  document.documentElement.style.setProperty('color-scheme', 'dark');
                } else {
                  document.documentElement.classList.remove('dark');
                  document.documentElement.style.removeProperty('color-scheme');
                }
              `,
                    }}
                />
            </head>
            <body
                className={`${geistSans.variable} ${geistMono.variable} antialiased min-h-[100dvh]`}
            >
                <TooltipProvider delayDuration={200}>
                    <ModalProvider>
                        <UserProvider userPromise={userPromise}>
                            {children}
                            <ModalWrapper />
                        </UserProvider>
                    </ModalProvider>
                </TooltipProvider>
            </body>
        </html>
    )
}
